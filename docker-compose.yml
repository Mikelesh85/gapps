version: '3'
services:
  grc:
    container_name: grc
    build:
      context: .
      dockerfile: Dockerfile
    depends_on:
      postgres:
        condition: "service_healthy"
    networks:
      - db_nw
      - web_nw
    ports:
      - "5000:5000"
    restart: unless-stopped
    environment:
      - PYTHONPATH=.
      - SQLALCHEMY_DATABASE_URI=postgresql://postgres:not-secret@postgres/grc
      - DEFAULT_EMAIL=${DEFAULT_EMAIL:-admin@example.com}
      - DEFAULT_PASSWORD=${DEFAULT_PASSWORD:-admin}
      - VERSION=${VERSION:-3.4.3}
      - APP_NAME=GRC
      - GUNICORN_WORKERS=2
      - MAIL_USERNAME=notification@saltsquare.io
      - EVIDENCE_BUCKET=dev-grc-evidence-bucket
      - AWS_PROFILE
    volumes:
      - .:/server
      - ~/.aws:/root/.aws
    command: >
      /bin/sh -c " \
        alembic upgrade head; \
         gunicorn --bind 0.0.0.0:5000 flask_app:app --access-logfile '-' --error-logfile "-" --timeout 600
      "
  # gapps-worker:
  #   container_name: gapps-worker
  #   build:
  #     context: .
  #     dockerfile: Dockerfile
  #   depends_on:
  #     postgres:
  #       condition: "service_healthy"
  #   networks:
  #     - db_nw
  #     - web_nw
  #   #ports:
  #   #  - "5000:5000"
  #   restart: unless-stopped
  #   environment:
  #     - SQLALCHEMY_DATABASE_URI=postgresql://postgres:not-secret@postgres/gapps
  #     - VERSION=${VERSION:-3.4.3}
  #     - APP_NAME=GRC
  #     - AS_WORKER=yes
  #     - POSTGRES_USER=postgres
  #     - POSTGRES_HOST=not-secret
  #     - POSTGRES_PASSWORD=gapps
  #     - POSTGRES_DB=${POSTGRES_DB:-db1}
  #     - WORKER_CONCURRENCY=${WORKER_CONCURRENCY:-1}
  #     - WORKER_LOG_LEVEL=DEBUG
  #     - MAIL_USERNAME=${MAIL_USERNAME}
  #     - MAIL_PASSWORD=${MAIL_PASSWORD}
  #     - EVIDENCE_BUCKET=dev-grc-evidence-bucket
  #     - AWS_PROFILE
  #   volumes:
  #     - .:/app
  #     - ~/.aws:/root/.aws
  postgres:
    container_name: postgres
    image: postgres
    command: ["postgres", "-c", "log_statement=all", "-c", "log_destination=stderr"]
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: not-secret
      POSTGRES_DB: grc
      PGDATA: /data/postgres
    volumes:
      - dbdata:/data/postgres
    ports:
     - "5432:5432"
    networks:
      - db_nw
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 10s
      retries: 120

networks:
  db_nw:
    driver: bridge
  web_nw:
    driver: bridge
volumes:
  dbdata:
